
digraph haokkoz_data_flow
{

/*
*/
	bgcolor = "#AAAAAA"

	{
		rank = same;
		AtcServiceEndpoint [ shape = invhouse ]; # for game version
		AirplaneServiceEndpoint [ shape = invhouse ]; # for updating flight plans
		MapServiceEndpoint [ shape = invhouse ]; # for node to point conversion
		eventServiceEndpoint [ shape = invhouse ]; # for events
		gameServiceEndpoint [ shape = invhouse ]; # to start games
	}

	{
		rank = same;
		stdOutEndpoint [ shape = doubleoctagon ];
		CanvasEndpoint [ shape = doubleoctagon ];
	}

	{
		rank = same;
		AirplaneServiceAdapter;
		AtcServiceAdapter;
		eventServiceAdapter;
		gameServiceAdapter;
		MapServiceAdapter;
	}

	{
		rank = same;
		CanvasAdapter;
		stdOutAdapter;
	}

	{
		rank = same;
		knowsAirplanes [ label = "kA (AirplaneDispatch)" ];
		knowsMap [ label = "kM (MapDispatch)" ];
	}

	HaoStarter;
	HS_GameRunner;
	ZonesMap;

	# [ label = "" ];

	AirplaneServiceAdapter -> AirplaneServiceEndpoint [ label = "path requests" ];
	AirplaneServiceAdapter -> knowsAirplanes [ label = "plan approved | rejected" ];

	AirplaneServiceEndpoint -> AirplaneServiceAdapter [ label = "path responses" ];

	AtcServiceAdapter -> AtcServiceEndpoint [ label = "game version requests" ];
	AtcServiceAdapter -> HS_GameRunner [ label = "game version" ];

	AtcServiceEndpoint -> AtcServiceAdapter [ label = "game version responses" ];

	CanvasEndpoint -> CanvasAdapter [ label = "connected, quit" ];

	CanvasAdapter -> CanvasEndpoint [ label = "mhc map" ];
	CanvasAdapter -> HS_GameRunner [ label = "hao quit, ~startGame" ];

	eventServiceAdapter -> eventServiceEndpoint [ label = "stream request" ];
	eventServiceAdapter -> knowsMap [ label = "gameStart | plane moved" ];
	eventServiceAdapter -> stdOutAdapter [ label = "other atcEvents" ];
	eventServiceAdapter -> knowsAirplanes [ label = "Arrived | fpath changed" ];
	eventServiceAdapter -> HS_GameRunner [ label = "game ended" color = "red" ];

	eventServiceEndpoint -> eventServiceAdapter [ label = "s responses" ];

	HaoStarter -> HS_GameRunner [ label = "init" color = "#227755" ];

	HS_GameRunner -> AtcServiceAdapter [ label = "request version" ];
	HS_GameRunner -> gameServiceAdapter [ label = "start game" ];
	HS_GameRunner -> HaoStarter [ label = "hao quit" color = "#227755" ];
	HS_GameRunner -> eventServiceAdapter [ label = "request events" ];

	gameServiceAdapter -> gameServiceEndpoint [ label = "gState, startG" ];

	gameServiceEndpoint -> gameServiceAdapter [ label = "sg gs response" ];

	knowsAirplanes -> CanvasAdapter [ label = "arrived | path-change" ];
	knowsAirplanes -> AirplaneServiceAdapter [ label = "change paths (arrived)" ];

	knowsMap -> CanvasAdapter [ label = "map saved" ];
	knowsMap -> knowsAirplanes [ label = "airplane moved" ];
	knowsMap -> ZonesMap [ label = "zone these" ];

	MapServiceAdapter -> MapServiceEndpoint [ label = "node-point requests" ];
	MapServiceAdapter -> ZonesMap [ label = "node-point" ];

	MapServiceEndpoint -> MapServiceAdapter [ label = "node-point responses" ];

	stdOutAdapter -> stdOutEndpoint [ label = "strings" ];

	ZonesMap -> MapServiceAdapter [ label = "get nodepoint" ];
	ZonesMap -> knowsMap [ label = "node zoned" ];

	# ->  [ label = "" ];

	subgraph cluster0 {
		color_legend [ label = "color and symbol legend" ];
		submodule;
		grpc_endpoint [ shape = invhouse ];
		io_endpoint [ shape = doubleoctagon ];

		submodule -> grpc_endpoint [ label = "queue" ];

		grpc_endpoint -> io_endpoint [ label = "method call" color = "#227755" ];
		grpc_endpoint -> submodule [ label = "remove" color = "red" ];

		io_endpoint -> submodule [ label = "unimplemented" color = "#AA7755" ];
	}
}

















